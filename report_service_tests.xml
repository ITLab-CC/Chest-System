<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="3" time="4.636" timestamp="2024-01-28T01:31:45.041453" hostname="MacBook-Air-SJ.fritz.box"><testcase classname="tests.service.api.v1.chest.test_chest.tavern.yaml." name="Make sure server implements crud functionality for chest endpoint:&#10;1: create_chest&#10;2: delete_chest&#10;3: Verify that status code equals 201 when we create a new chest and the chest is returned&#10;4: Verify that status code equals 303 and we get a redirect to an already existing chest, when we create a new chest with a name that already exists&#10;5: Check for status 404 if we try to get an chest with a wrong id&#10;6: Get chest with id&#10;7: Get a list of chests&#10;8: Check if a we can update an chest with a new name, and the id stays the same&#10;9: Get list of chests, after we have updated one chest =&gt; 1 chest in list&#10;10: Create a second chest, to test that we can not update an chest to an already existing name&#10;11: Check for status 303 if we update chest to an already existing name&#10;12: Check for status 404 if we update with a non existing id&#10;13: Check for status 404 when trying to delete a non existent chest&#10;14: Delete first created chest with id&#10;15: Delete second created chest with id" time="2.277" /><testcase classname="tests.service.api.v1.chest_items.test_chest_items.tavern.yaml." name="Make sure server implements crud functionality for chest items endpoint (The n:m relation between chests and items):&#10;1: create_chest&#10;2: create_item&#10;3: Add item to chest&#10;4: Get all chest items&#10;5: Remove item from chest&#10;6: delete_chest&#10;7: delete_item" time="0.080" /><testcase classname="tests.service.api.v1.item.test_item.tavern.yaml." name="Make sure server implements crud functionality for item endpoint:&#10;1: create_item&#10;2: delete_item&#10;3: Verify that status code equals 201 when we create a new item and the item is returned&#10;4: Verify that status code equals 303 and we get a redirect to an already existing item, when we create a new item with a name that already exists&#10;5: Check for status 404 if we try to get an item with a wrong id&#10;6: Get item with id&#10;7: Get a list of items&#10;8: Update item&#10;9: Check if a we can update an item with a new name, and the id stays the same&#10;10: Get list of items, after we have updated one item =&gt; 1 item in list&#10;11: Create a second item, to test that we can not update an item to an already existing name&#10;12: Check for status 303 if we update item to an already existing name&#10;13: Check for status 404 if we update with a non existing id&#10;14: Check for status 404 when trying to delete a non existent item&#10;15: Delete first created item with id&#10;16: Delete second created item with id" time="2.188" /></testsuite></testsuites>
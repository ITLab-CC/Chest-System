---
test_name: Make sure server implements crud functionality for chest items endpoint (The n:m relation between chests and items)

includes:
  - !include common.yaml
  - !include ../chest/chest_stage.yaml
  - !include ../item/item_stage.yaml

stages:
  # Create a chest and an item
  - type: ref
    id: create_chest
  - type: ref
    id: create_item

  # Add the item to the chest
  - name: Add item to chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items
      json:
        item_id: '{item_id:d}'
        anzahl: '{item_anzahl:d}'
      method: POST
    response:
      status_code: 201
      json:
        item_id: !int '{item_id:d}'
        anzahl: !int '{item_anzahl:d}'
      save:
        json:
          item_id: item_id
          item_anzahl: anzahl

  # Get all items from the chest
  - name: Get all chest items
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items
      method: GET
    response:
      status_code: 200
      json:
        id: !int '{chest_id:d}'
        name: '{chest_name:s}'
        items:
          - item_id: !int '{item_id:d}'
            anzahl: !int '{item_anzahl:d}'

  # Get all chests by item id
  - name: Get all chests by item id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/items/{item_id}/chests
      method: GET
    response:
      status_code: 200
      json:
        id: !int '{item_id:d}'
        name: '{item_name:s}'
        description: '{item_description:s}'
        chests:
          - kiste_id: !int '{chest_id:d}'
            anzahl: !int '{item_anzahl:d}'

  # Update the quantity of the item in the chest
  - name: Update item in chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items
      json:
        anzahl: '{item_anzahl_2:d}'
        item_id: '{item_id:d}'
      method: PUT
    response:
      status_code: 200
      json:
        item_id: !int '{item_id:d}'
        anzahl: !int '{item_anzahl_2:d}'

  # Try to add the same item to the chest again
  # Should sum up the quantity
  - name: Add item to chest again
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items
      json:
        item_id: '{item_id:d}'
        anzahl: '{item_anzahl:d}'
      method: POST
    response:
      status_code: 201
      json:
        item_id: !int '{item_id:d}'
        anzahl: !int '{item_anzahl_sum:d}'
      save:
        json:
          item_id: item_id
          item_anzahl: anzahl

  # Create second_item
  - name: Create second item
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/items
      json:
        name: '{second_item_name:s}'
        description: '{second_item_description:s}'
      method: POST
    response:
      status_code: 201
      json:
        name: '{second_item_name:s}'
        description: '{second_item_description:s}'
        id: !anything
      save:
        json:
          second_item_id: id

  # Add second_item to chest
  - name: Add second item to chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items
      json:
        item_id: '{second_item_id:d}'
        anzahl: '{second_item_anzahl:d}'
      method: POST
    response:
      status_code: 201
      json:
        item_id: !int '{second_item_id:d}'
        anzahl: !int '{second_item_anzahl:d}'

  # Create a second chest
  - name: Create second chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests
      json:
        name: '{second_chest_name:s}'
      method: POST
    response:
      status_code: 201
      json:
        name: '{second_chest_name:s}'
        id: !anything
      save:
        json:
          second_chest_id: id

  # Get all items from the chest
  - name: Get all chest items
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items
      method: GET
    response:
      status_code: 200
      strict:
        - json:list_any_order
      json:
        id: !int '{chest_id:d}'
        name: '{chest_name:s}'
        items:
          - item_id: !int '{item_id:d}'
            anzahl: !int '{item_anzahl_sum:d}'
          - item_id: !int '{second_item_id:d}'
            anzahl: !int '{second_item_anzahl:d}'

  # Get all chests by item id
  - name: Get all chests by item id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/items/{item_id}/chests
      method: GET
    response:
      status_code: 200
      json:
        id: !int '{item_id:d}'
        name: '{item_name:s}'
        description: '{item_description:s}'
        chests:
          - kiste_id: !int '{chest_id:d}'
            anzahl: !int '{item_anzahl_sum:d}'

  # Add item to second chest
  - name: Add item to second chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{second_chest_id}/items
      json:
        item_id: '{item_id:d}'
        anzahl: '{item_anzahl:d}'
      method: POST
    response:
      status_code: 201
      json:
        item_id: !int '{item_id:d}'
        anzahl: !int '{item_anzahl:d}'

  # Get all items from the chest
  - name: Get all chest items
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{second_chest_id}/items
      method: GET
    response:
      status_code: 200
      strict:
        - json:list_any_order
      json:
        id: !int '{second_chest_id:d}'
        name: '{second_chest_name:s}'
        items:
          - item_id: !int '{item_id:d}'
            anzahl: !int '{item_anzahl:d}'

  # Get all chests by item id
  - name: Get all chests by item id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/items/{item_id}/chests
      method: GET
    response:
      status_code: 200
      json:
        id: !int '{item_id:d}'
        name: '{item_name:s}'
        description: '{item_description:s}'
        chests:
          - kiste_id: !int '{chest_id:d}'
            anzahl: !int '{item_anzahl_sum:d}'
          - kiste_id: !int '{second_chest_id:d}'
            anzahl: !int '{item_anzahl:d}'

  # Remove the item from the chest
  - name: Remove item from chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items/{item_id}
      method: DELETE
    response:
      status_code: 204

  # Remove the second_item from the chest
  - name: Remove second item from chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{chest_id}/items/{second_item_id}
      method: DELETE
    response:
      status_code: 204

  # Remove the item from the second chest
  - name: Remove item from second chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{second_chest_id}/items/{item_id}
      method: DELETE
    response:
      status_code: 204

  # Delete the second_item
  - name: Delete second item
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/items/{second_item_id}
      method: DELETE
    response:
      status_code: 204

  # Delete the second chest
  - name: Delete second chest
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/api/v2/chests/{second_chest_id}
      method: DELETE
    response:
      status_code: 204

  # ---- Delete the chest and the item
  - type: ref
    id: delete_chest
  - type: ref
    id: delete_item
